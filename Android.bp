cc_defaults {
    name: "llvm50-defaults",
    defaults: ["llvm50-defaults-no-generated-headers"],
    header_libs: ["llvm50-headers"],
}

// This module defines all of the defaults used to compiled llvm, except for
// the generated headers.  It is necessary to avoid a circular dependency
// from the tblgen tool used to generate the headers to the generated headers.
llvm_defaults {
    name: "llvm50-defaults-no-generated-headers",

    host_supported: true,
    clang: true,

    cflags: [
        "-D_GNU_SOURCE",
        "-D__STDC_LIMIT_MACROS",
        "-D__STDC_CONSTANT_MACROS",
        "-D__STDC_FORMAT_MACROS",
        "-fomit-frame-pointer",
        "-Wall",
        "-W",
        "-Wno-sign-compare",
        "-Wno-unused-parameter",
        "-Wno-maybe-uninitialized",
        "-Wno-missing-field-initializers",
        "-Wwrite-strings",
        "-Werror",
        "-Dsprintf=sprintf",
        "-DLLVM_BUILD_GLOBAL_ISEL",
    ],

    cppflags: [
        "-Wno-sign-promo",
        "-std=c++11",
    ],

    clang_cflags: [
        // Temporarily suppress the warnings http://b/37867503
        "-Wno-error=unused-lambda-capture",
        "-Wno-error=user-defined-warnings",
    ],

    header_libs: ["llvm50-headers-no-generated-headers"],

    target: {
        android: {
            cflags: [
                "-finline-functions",
            ],
            cppflags: [
                "-Woverloaded-virtual",
            ],
        },
        host: {
            cppflags: [
                "-fno-rtti",
                "-fno-exceptions",
            ],
        },
        windows: {
            // Disable certain warnings for use with mingw.
            // We also must undefine WIN32_LEAN_AND_MEAN, since it is being passed globally
            // on the command line, and LLVM defines this internally itself.
            cflags: [
                "-Wno-array-bounds",
                "-Wno-comment",
                "-UWIN32_LEAN_AND_MEAN",
            ],

            host_ldlibs: ["-luuid"],
        },
        linux: {
            cppflags: ["-Woverloaded-virtual"],

            // Add on ncurses to have support for terminfo
            host_ldlibs: [
                "-ldl",
                "-lncurses",
                "-lgcc_s",
            ],
        },
        darwin: {
            cppflags: [
                "-Wno-deprecated-declarations",
                "-Woverloaded-virtual",
            ],

            // Add on ncurses to have support for terminfo
            host_ldlibs: [
                "-ldl",
                "-lncurses",
            ],
        },
    },
}

cc_library_headers {
    name: "llvm50-headers-no-generated-headers",
    vendor_available: true,
    host_supported: true,
    export_include_dirs: ["include"],
    target: {
        android: {
            export_include_dirs: ["device/include"],
        },
        host: {
            export_include_dirs: ["host/include"],
        },
        linux_bionic: {
            enabled: true,
        },
        windows: {
            enabled: true,
        },
    },
}

cc_library_headers {
    name: "llvm50-headers",
    vendor_available: true,
    host_supported: true,
    header_libs: ["llvm50-headers-no-generated-headers"],
    export_header_lib_headers: ["llvm50-headers-no-generated-headers"],
    generated_headers: [
        "llvm50-gen-attributes",
        "llvm50-gen-intrinsics",
        "llvm50-gen-revision",
    ],
    export_generated_headers: [
        "llvm50-gen-attributes",
        "llvm50-gen-intrinsics",
        "llvm50-gen-revision",
    ],
    target: {
        windows: {
            enabled: true,
        },
    },
}

llvm50_tblgen {
    name: "llvm50-gen-attributes",
    in: "include/llvm/IR/Attributes.td",
    outs: ["llvm/IR/Attributes.gen"],
}

llvm50_tblgen {
    name: "llvm50-gen-intrinsics",
    in: "include/llvm/IR/Intrinsics.td",
    outs: ["llvm/IR/Intrinsics.gen"],
}

genrule {
    name: "llvm50-gen-revision",
    out: ["llvm/Support/VCSRevision.h"],
    srcs: [".git/logs/HEAD"],
    tool_files: ["git_sha1_gen.py"],
    cmd: "python $(location git_sha1_gen.py) --output $(out)",
}

force_build_llvm50_components_defaults {
    name: "force_build_llvm50_components",
    // Host build disabled by soong/llvm.go unless FORCE_BUILD_LLVM_COMPONENTS
    // environment variable is set
}

// LLVM shared library build

llvm_arm_static_libraries = [
    "libLLVM50ARMCodeGen",
    "libLLVM50ARMAsmParser",
    "libLLVM50ARMAsmPrinter",
    "libLLVM50ARMInfo",
    "libLLVM50ARMDesc",
    "libLLVM50ARMDisassembler",
]

llvm_x86_static_libraries = [
    "libLLVM50X86CodeGen",
    "libLLVM50X86Info",
    "libLLVM50X86Desc",
    "libLLVM50X86AsmParser",
    "libLLVM50X86AsmPrinter",
    "libLLVM50X86Utils",
    "libLLVM50X86Disassembler",
]

llvm_mips_static_libraries = [
    "libLLVM50MipsCodeGen",
    "libLLVM50MipsInfo",
    "libLLVM50MipsDesc",
    "libLLVM50MipsAsmParser",
    "libLLVM50MipsAsmPrinter",
    "libLLVM50MipsDisassembler",
]

llvm_aarch64_static_libraries = [
    "libLLVM50AArch64CodeGen",
    "libLLVM50AArch64Info",
    "libLLVM50AArch64Desc",
    "libLLVM50AArch64AsmParser",
    "libLLVM50AArch64AsmPrinter",
    "libLLVM50AArch64Utils",
    "libLLVM50AArch64Disassembler",
]

llvm_amdgpu_static_libraries = [
    "libLLVM50AMDGPUCodeGen",
    "libLLVM50AMDGPUInfo",
    "libLLVM50AMDGPUDesc",
    "libLLVM50AMDGPUAsmParser",
    "libLLVM50AMDGPUAsmPrinter",
    "libLLVM50AMDGPUUtils",
]


cc_library_shared {
    host_supported: true,
    name: "libLLVM50",
    defaults: [
        "llvm50-defaults",
        "force_build_llvm50_components",
    ],

    whole_static_libs: [
        // pre static libraries
        "libLLVM50Linker",
        "libLLVM50ipo",
        "libLLVM50DebugInfoDWARF",
        "libLLVM50DebugInfoMSF",
        "libLLVM50DebugInfoPDB",
        "libLLVM50Symbolize",
        "libLLVM50IRReader",
        "libLLVM50BitWriter",
        "libLLVM50BitReader",
        "libLLVM50Passes",

        // post static libraries
        "libLLVM50LTO",
        "libLLVM50AsmPrinter",
        "libLLVM50SelectionDAG",
        "libLLVM50CodeGen",
        "libLLVM50DebugInfoCodeView",
        "libLLVM50Object",
        "libLLVM50ScalarOpts",
        "libLLVM50InstCombine",
        "libLLVM50Instrumentation",
        "libLLVM50TransformObjCARC",
        "libLLVM50TransformUtils",
        "libLLVM50Analysis",
        "libLLVM50Target",
        "libLLVM50GlobalISel",
        "libLLVM50MCDisassembler",
        "libLLVM50MC",
        "libLLVM50MCParser",
        "libLLVM50Core",
        "libLLVM50AsmParser",
        "libLLVM50Option",
        "libLLVM50Support",
        "libLLVM50Vectorize",
        "libLLVM50ProfileData",
        "libLLVM50ProfileDataCoverage",
        "libLLVM50LibDriver",
        "libLLVM50ExecutionEngine",
        "libLLVM50RuntimeDyld",
        "libLLVM50MCJIT",
        "libLLVM50OrcJIT",
        "libLLVM50BinaryFormat",
    ],

    export_include_dirs: ["include"],

    target: {
        host: {
            // Host build pulls in all ARM, Mips, X86 components.
           whole_static_libs: llvm_arm_static_libraries +
                llvm_aarch64_static_libraries +
                llvm_mips_static_libraries +
                llvm_x86_static_libraries,
            export_include_dirs: ["host/include"],
        },
        windows: {
            enabled: true,
            host_ldlibs: [
                "-limagehlp",
                "-lpsapi",
                "-lole32",
                "-lversion",
            ],
        },
        darwin: {
            host_ldlibs: [
                "-ldl",
                "-lpthread",
            ],
        },
        linux: {
            host_ldlibs: [
                "-ldl",
                "-lpthread",
            ],
        },
        android: {
            export_include_dirs: ["device/include"],
            whole_static_libs: llvm_amdgpu_static_libraries,
        },
        android_arm: {
            whole_static_libs: llvm_arm_static_libraries,
        },
        android_x86: {
            whole_static_libs: llvm_x86_static_libraries +
                llvm_arm_static_libraries +
                llvm_aarch64_static_libraries,
        },
        android_x86_64: {
            whole_static_libs: llvm_x86_static_libraries +
                llvm_arm_static_libraries +
                llvm_aarch64_static_libraries,
        },
        android_mips: {
            whole_static_libs: llvm_mips_static_libraries,
        },
        android_mips64: {
            whole_static_libs: llvm_mips_static_libraries,
        },
        android_arm64: {
            whole_static_libs: llvm_aarch64_static_libraries +
                llvm_arm_static_libraries,
        },
    },
}

subdirs = [
    "soong",
    "lib",
    "utils/TableGen",
]
